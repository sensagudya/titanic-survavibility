# -*- coding: utf-8 -*-
"""titanic-classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11pcL3cLW-v0mpV7Ad2ELD2YpZGDg0Aa9

# **Titanic Passengers Survavibility**

Create a model that predicts which passengers survived the Titanic shipwreck.
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

titanic_data = pd.read_csv('/content/drive/My Drive/My Mini Projects/Kaggle - Titanic/train.csv')
titanic_data.head()

"""## **Data Exploration**"""

titanic_data.columns

#lihat ukuran dataframe
titanic_data.shape

"""### **Melihat nilai-nilai unik atribut**"""

titanic_data.groupby('Pclass').size()

#grafik visualisasi untuk Pclass
sns.countplot(titanic_data.Pclass,label='Count')
plt.show()

titanic_data.groupby('Sex').size()

sns.countplot(titanic_data.Sex,label='count')
plt.show()

titanic_data.groupby('Embarked').size()

sns.countplot(titanic_data.Embarked,label='count')
plt.show()

#melihat sebaran data, apakah ada yang terdistribusi normal?

titanic_data.drop('Survived',axis=1).hist(bins=30,figsize=(9,9))
plt.show()

"""## **Preprocessing/Cleaning**

### **Handling Missing Values**
"""

#cek atribut, apakah ada data null?

titanic_data.isnull().sum()

#mengisi nilai-nilai null

titanic_data.Age.fillna(titanic_data.Age.mean(),inplace=True)
titanic_data.Cabin.fillna('No Cabin', inplace=True)
titanic_data.Embarked.fillna('S', inplace=True) #kelas dominan

titanic_data.isnull().sum()

#cek tipe data
titanic_data.dtypes

"""### **Mapping Sex & Embarked Attributes**"""

#sex
map_sex={'female':0,'male':1}
titanic_data['Sex'] = titanic_data['Sex'].map(map_sex)

#embarked
map_emb={'S':0,'C':1,'Q':2}
titanic_data['Embarked']=titanic_data['Embarked'].map(map_emb)

titanic_data.head()

#statistical summary
titanic_data.describe()

#set variabel untuk proses pembelajaran, mana yang jadi fitur pembelajaran dan target

features = ['Age','Sex','Pclass','Embarked']
X=titanic_data[features]
Y=titanic_data['Survived']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 5)

#nilai-nilai atribut memiliki range yang bervariasi, perlu normalisasi

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

"""## **Build Model**

###**k-Nearest Neighbor**
"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier()

knn.fit(X_train, Y_train)
acc_train = knn.score(X_train, Y_train)
acc_val = knn.score(X_test, Y_test)

print(acc_train, acc_val)

"""### **Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier

decisiontree = DecisionTreeClassifier()

decisiontree.fit(X_train,Y_train)
acc_train = decisiontree.score(X_train, Y_train)
acc_val = decisiontree.score(X_test, Y_test)

print(acc_train, acc_val)

"""### **Random Forest**"""

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=1000, max_depth=5)

rf.fit(X_train,Y_train)
acc_train = rf.score(X_train, Y_train)
acc_val = rf.score(X_test,Y_test)

print(acc_train, acc_val)

"""### **Reports**"""

#decision tree report

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

pred = decisiontree.predict(X_test)
print(confusion_matrix(Y_test, pred))
print(classification_report(Y_test, pred))

"""## **Predict for new data**"""

titanic_test = pd.read_csv('/content/drive/My Drive/My Mini Projects/Kaggle - Titanic/test.csv')
print(titanic_test.shape)
print(titanic_test.head())

titanic_test.isnull().sum()

#karena tidak pakai cabin dan fare, null di cabin dan fare abaikan

titanic_test['Age'].fillna(titanic_test.Age.mean(),inplace=True)
titanic_test.isnull().sum()

#mapping sex & embarked
#sex
map_sex={'female':0,'male':1}
titanic_test['Sex'] = titanic_test['Sex'].map(map_sex)
#embarked
map_emb={'S':0,'C':1,'Q':2}
titanic_test['Embarked']=titanic_test['Embarked'].map(map_emb)

#set variabel untuk proses pembelajaran, mana yang jadi fitur pembelajaran dan target

features = ['Age','Sex','Pclass','Embarked']
X_test=titanic_test[features]
X_test = scaler.fit_transform(X_test)

X_test

y = decisiontree.predict(X_test)

print(y)

label = pd.DataFrame(y)

#save to submission file
submission = pd.concat([titanic_test['PassengerId'],label],axis=1)

submission.head()

submission.rename(columns = {0:'Survived'},inplace=True)

submission.head()

submission.to_csv('/content/drive/My Drive/My Mini Projects/Kaggle - Titanic/submission.csv')